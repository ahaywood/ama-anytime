datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
model User {
  id                  Int        @id @default(autoincrement())
  username            String     @unique
  email               String     @unique
  hashedPassword      String     @default("")
  salt                String     @default("")
  resetToken          String?
  resetTokenExpiresAt DateTime?
  name                String?
  bio                 String?
  location            String?
  website             String?
  cover               String?
  avatar              String?
  joinedDate          DateTime   @default(now())
  lastLogin           DateTime?  @updatedAt
  clearNotifications  DateTime?  @default(now())
  invitations         Int?       @default(0)
  questionsAuthored   Question[] @relation("author")
  questionsDirectedAt Question[] @relation("directedAt")
  Likes               Like[]     @relation("likedBy")
  Bookmarks           Bookmark[] @relation("bookmarkedBy")
  Votes               Vote[]     @relation("votedBy")
}

model Question {
  id                 Int        @id @default(autoincrement())
  question           String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  answer             String?
  author             User       @relation("author", fields: [authorId], references: [id])
  authorId           Int
  directedAt         User       @relation("directedAt", fields: [directedAtId], references: [id])
  directedAtId       Int
  archive            Boolean    @default(false)
  Likes              Like[]     @relation("likedQuestion")
  Bookmarks          Bookmark[] @relation("bookmarkdQuestion")
  reuseQuestion      Question?  @relation("reuseQuestion", fields: [reuseQuestionId], references: [id])
  reuseQuestionId    Int?
  reusedQuestions    Question[] @relation("reuseQuestion")
  followupQuestion   Question?  @relation("followupQuestion", fields: [followupQuestionId], references: [id])
  followupQuestionId Int?
  followupQuestions  Question[] @relation("followupQuestion")
  votes              Vote[]     @relation("votedQuestion")
}

model Like {
  id         Int      @id @default(autoincrement())
  question   Question @relation("likedQuestion", fields: [questionId], references: [id])
  questionId Int
  user       User     @relation("likedBy", fields: [userId], references: [id])
  userId     Int

  @@unique([questionId, userId])
}

model Bookmark {
  id         Int      @id @default(autoincrement())
  question   Question @relation("bookmarkdQuestion", fields: [questionId], references: [id])
  questionId Int
  user       User     @relation("bookmarkedBy", fields: [userId], references: [id])
  userId     Int

  @@unique([questionId, userId])
}

model Vote {
  id         Int      @id @default(autoincrement())
  question   Question @relation("votedQuestion", fields: [questionId], references: [id])
  questionId Int
  user       User     @relation("votedBy", fields: [userId], references: [id])
  userId     Int

  @@unique([questionId, userId])
}
